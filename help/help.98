
newton

    Based on the Newton formula for finding the roots of z^p - 1.
    Pixels are colored according to the iteration when the orbit
    is captured by a root.

      z(0) = pixel
      z(n+1) = ((p-1)*z(n)^p + 1)/(p*z(n)^(p - 1)).

    One parameter: the polynomial degree p.


The generating formula here is identical to that for newtbasin, but the
coloring scheme is different. Pixels are colored not according to the root
that would be "converged on" if you started using Newton's formula from
that point, but according to the iteration when the value is close to a
root. For example, if the calculations for a particular pixel converge to
the 7th root on the 23rd iteration, newtbasin will color that pixel using
color #7, but newton will color it using color #23.

If you have a 256-color mode, use it: the effects can be much livelier
than those you get with type=newtbasin, and color cycling becomes, like,
downright cosmic. If your "corners" choice is symmetrical, xmfract
exploits the symmetry for faster display.

The applicable "params=" values are the same as newtbasin. Try "params=4."
Other values are 3 through 10. 8 has twice the symmetry and is faster.

